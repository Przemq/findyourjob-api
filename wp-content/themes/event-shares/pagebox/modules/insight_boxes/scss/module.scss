@import "module-variables";

// Overall module styles
@include overall_module() {
  position: relative;
  //  Included Module Insights Filter
  $sub_nav_item: #55c2a2;
  $circle_height: 20px;
  $circle_width: 20px;
  $font_color: #1e2c32;
  $circle_color: #CEECF5;
  background: #fff;
  padding: 60px 0 0;
  .filter-wrapper {
    @include media-breakpoint-down(md) {
      padding: 15px 0 15px 0;

    }
    .nav-tabs-dropdown {
      display: none;
      font-family: 'Merriweather', serif;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      border-bottom: 1px solid #002841;
      font-size: 18px;
      text-transform: uppercase;
      color: #002841;
      font-weight: 700;
      padding: 15px 25px;
      position: relative;
      font-style: italic;
      text-align: center;

      &:after {
        content: '';
        background: url($template-url + '/assets/images/Black-Down-Chevron-01-01.svg');
        width: 15px;
        height: 8px;
        display: block;
        background-size: cover;
        @include position (absolute, 22px null null 22px);

      }
      @include media-breakpoint-down(md) {
        display: block !important;

      }
      &.nav-hidden {
        display: none;

      }
      &.nav-show {
        display: block;
      }
    }
    .show {
      &:after {
        @include transition(all .3s ease-in-out);
        @include transform(rotate(180deg));

        &:hover {
          @include animation (pulse 2s infinite);

        }
      }
    }
    .custom-nav-item {
      border-bottom: 1px solid #002841;
      @include media-breakpoint-up(lg) {
        margin: 0 -2px;
        border-bottom: none;

      }
      @include media-breakpoint-down(md) {
        text-align: left;

      }
      .active {
        @include media-breakpoint-up(lg) {
          &:after {
            display: inline-block;
            vertical-align: middle;
            width: 20px;
            height: 20px;
            background-color: #ebebeb;
            border: solid 2px #002841;
            border-radius: 50%;
            position: absolute;
            top: 50px;
            left: calc(50% - 5px);
            content: '';

          }
        }
      }
      a {
        border: none;
        color: #a6a6a6;
        font-family: 'Merriweather', serif;
        font-style: italic;
        text-align: center;
        line-height: 55px;
        font-size: 18px;

        @include media-breakpoint-down(md) {
          margin: 0;

        }
      }
    }
    .nav-tabs-wrapper {
      display: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      border-bottom: 1px solid #002841;

      &.nav-hidden {
        display: none;

      }
      &.nav-show {
        &.big-resolutions {
          @include media-breakpoint-up(lg) {
            display: block !important;
          }
        }
      }
      &.nav-mobile-show {
        @include media-breakpoint-down(md) {
          display: block !important;
        }
      }
    }
    .nav-tabs-horizontal {
      margin-bottom: 20px;

      > li {
        float: none;
        background: transparent;
        padding-bottom: 5px;

        & > a {
          display: block;

        }
        & > a.active {
          color: #002841;

          &:hover, &:focus {
            color: #002841;

          }
        }
      }
    }
    .button-wrapper {
      text-align: center;
      padding-bottom: 20px;

    }
    .filter {
      margin-top: 20px;

      @include media-breakpoint-up(lg) {
        position: absolute;
        top: -10px;
        right: 15px;
        min-width: 650px;
        margin-top: 0;

      }
      .buttons {
        @include media-breakpoint-up(lg) {
          display: flex;

        }
      }
      .filter-by {
        text-transform: uppercase;
        font-family: 'Roboto Condensed', sans-serif;
        font-size: 16px;
        text-align: right;
        line-height: 70px;
        font-weight: bold;
        letter-spacing: 3px;
        color: $font_color;

        @include media-breakpoint-down(md) {
          text-align: left;
          line-height: 45px;
        }
      }
      .custom-dropdown {
        margin-bottom: 10px;
        width: 100%;
        height: 48px;

        @include media-breakpoint-up(lg) {
          width: 100%;
          margin: 10px;
        }
      }
      .custom-dropdown-menu {
        border-radius: 0;
        line-height: 40px;
        padding: 0;
        font-size: 13px;
        width: 100%;
        margin-top: 0;
        border: none;
        @include transform-origin(top);
        @include animation-fill-mode(forwards);
        @include transform(scale(1, 0));
        @include transition(all 0.2s ease-in-out);

        .dropdown-item:active {
          background: #dadada;

        }
      }
      .show > .custom-dropdown-menu {
        @include transform(scale(1, 1));

      }
      .dropdown-button {
        width: 100%;
        line-height: 50px;
        background: transparent;
        display: block;
        padding: 0 40px 0 15px;
        color: #013140;
        font-size: 14px;
        font-weight: 600;
        position: relative;
        @include transition(all 0.2s ease-in-out);
        text-align: left;
        box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.75);

        &:hover {
          background: #f7f7f9;

        }
        &:after {
          content: '';
          background-image: url($template-url + "/assets/images/down-arrow-dropdown.svg");
          width: 15px;
          height: 8px;
          display: block;
          background-size: cover;
          line-height: 0;
          @include transition(all .3s ease-in-out);
          @include position (absolute, calc(50% - 5.5px) 15px null null);

        }
      }
      .show {
        > .dropdown-button {
          &:after {
            @include transition(all .3s ease-in-out);
            @include transform(rotate(180deg));

            &:hover {
              @include animation (pulse 2s infinite);

            }
          }
        }
      }
      a {
        font-family: 'Merriweather', serif;

      }
    }
  }

  // Boxes styles

  $paragraph-color: #002841;
  $article_info_color: #B3B3B3;
  $header-color: #002842;
  $learn-more-color: #55c2a2;

  .article-boxes {
    padding-top: 20px;
    padding-bottom: 30px;
    .single-article {
      text-align: center;
      padding-top: 20px;
      padding-bottom: 10px;

      .image-container {
        min-height: 130px;
        svg {
          height: 105px;
          width: 90px;
        }
        img {
          width: 100%;
          height: auto;
          max-width: 100%;
          display: block;
          margin: 0 auto;
        }
      }

      .publication-info {
        text-align: left;
        font-family: 'Merriweather', serif;
        color: $article_info_color;
        padding-top: 25px;
        font-weight: 400;
      }

      h3 {
        letter-spacing: 3px;
        color: $header-color;
        text-align: left;
        font-weight: 700;
        padding-top: 5px;
        line-height: 32px;
      }

      p {
        text-align: left;
        line-height: 27px;
        color: $paragraph-color;
        margin-bottom: 7px;
      }

      a {
        text-decoration: none;
        color: $learn-more-color;
        font-weight: 700;
        letter-spacing: 3px;
        font-family: 'Roboto Condensed', sans-serif;
        font-size: 16px;
      }
    }

    .content-wrapper {
      background-color: white;
      padding: 15px;
      height: 100%;
      @include transition(300ms all);
      &:hover {
        @include transform(translateY(-4px));
        box-shadow: 0 18px 35px rgba(50, 50, 93, .1), 0 8px 15px rgba(0, 0, 0, .07);
      }
    }
  }

  .nothingfound {
    font-size: 42px;
    padding: 30px 0;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg)
    }

    100% {
      transform: rotate(360deg)
    }
  }

  .loading {
    display: none;
    justify-content: center;
    min-height: 300px;
    align-items: center;
    position: absolute;
    z-index: 99;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(255, 255, 255, .95);
    &.show {
      display: flex;
    }
    .loader {
      border: 13px solid #da8b00;
      border-top: 13px solid #0f8abc;
      border-left: 13px solid #155776;
      border-radius: 50%;
      width: 85px;
      height: 85px;
      @include animation(spin 0.8s cubic-bezier(.3, .6, .8, .6) infinite);
    }
  }

  .pagePagination {
    .page-numbers {
      padding: 5px;
    }
  }

}

// Styles for unique page/post module.
// In this scope you can use special functions to get data from pageboxes:
// - get( key )
// - get_deep( keys... )
@include specified_module_loop() {
  background-color: get('backgroundColor');

  .filter-wrapper {
    .nav-tabs-horizontal {
      & > {
        li {
          & > {
            a {
              color: get('inactiveFilterTextColor');
              font-size: get('filterTextSize');
              &:hover {
                color: get('inactiveFilterTextColorHover');
              }
              @include transition(all 300ms);
              &.active {
                text-decoration: none;
                color: get('filterActiveTextColor');
                &:hover {
                  color: get('activeColorHover');
                }
              }
            }
          }
        }
      }
    }
    .tab-content {
      .text-content p {
        color: get('filterDescriptionTextColor');
        font-size: get('filterDescriptionTextSize');

      }
    }
  }

  .article-boxes {
    .single-article {
      .content-wrapper {
        @include transition(300ms all);
        svg {
          path, polygon, circle, rect {
            color: get('iconColor');
            stroke: get('iconColor');
          }
        }
        &:hover {
          path, polygon, circle, rect {
            color: get('iconColorHover');
            stroke: get('iconColorHover');
          }
        }
        .buttons {
          text-align: left;
          a {
            @include transition(300ms all);
            color: get('buttonColor');
            @if (get('isButtonColorBackgroundTransparent') == 1) {
              background: transparent;
            } @else {
              background: get('buttonColorBackground');
            }
            &:hover {
              color: get('buttonColorHover');
              @if (get('isButtonColorBackgroundTransparentHover') == 1) {
                background: transparent;
              } @else {
                background: get('buttonColorBackgroundHover');
              }
            }
          }
        }
      }
    }
  }
}